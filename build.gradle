apply from: 'config.gradle'

buildscript {
    ext {
        springBootVersion = '2.2.13.RELEASE'
        FAST_MIRROR_REPO_URL = 'https://maven.aliyun.com/nexus/content/groups/public/'
    }
    repositories {
        maven { url FAST_MIRROR_REPO_URL }
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    group = 'com.jetwinner'
    version = '0.8.4'
    sourceCompatibility = 1.8
    ext {
        jarVersion = rootProject.ext.version
    }

    [compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }
    }

    repositories {
        mavenLocal()
        maven { url FAST_MIRROR_REPO_URL }
        mavenCentral()
    }

    dependencies {
        compileOnly('com.google.code.findbugs:annotations:3.0.1')
        implementation('org.springframework.boot:spring-boot-starter')
        testImplementation('org.springframework.boot:spring-boot-starter-test')
    }

    jar {
        enabled = true
        bootJar.enabled = false
        manifest {
            attributes('Implementation-Title': 'Gradle')
        }
    }

    test {
        systemProperty "spring.profiles.active", System.getProperty("spring.profiles.active")
    }

    processResources {
        filesMatching('application.properties') {
            expand(project.properties)
        }
    }

    // 获取本地仓库路径
    // def localRepositoryPath = 'file://' + new File(System.getProperty('user.home'), '.m2/repository').absolutePath
    def localRepositoryPath = 'file://' + rootProject.projectDir.absolutePath + '/libs/repo'
    uploadArchives {  // 打包至本地仓库配置
        repositories {
            mavenDeployer { // mavenDeployer need apply plugin: 'maven'
                repository(url: localRepositoryPath)
                pom.project {
                    name = project.name
                    version = project.version
                    groupId = project.group
                }
            }
        }
    }
}

Task copyJar = project.task("copyJar", type: Copy, dependsOn: subprojects.jar) {
    from(subprojects.jar)
    into project.file('dist')
}

Task copyJarToQuickStart = project.task("copyJarToQuickStart", type: Copy, dependsOn: subprojects.jar) {
    from(subprojects.jar)
    exclude('webfast-module*.jar')
    exclude('webfast-starter-demo*.jar')
    into project.file('../webfast2quickstart/lib')
}

Task taskForSourceZip = project.task("makeSourceZip", type: Zip) {
    archiveBaseName = "${rootProject.name}-${subprojects.version[0]}"
    from(project.rootDir) {
        excludes = ['dist/**', '.gradle/**', '.idea/**', 'backup4dev/**', '**/out/**', '**/build/**']
    }
    into("${rootProject.name}")
    destinationDirectory = file("../${rootProject.name}-backup4dev")
}